"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useGraphQLSSE = void 0;
const graphql_1 = require("graphql");
const fetch_1 = require("graphql-sse/lib/use/fetch");
function useGraphQLSSE(options = {}) {
    const { endpoint = '/graphql/stream' } = options;
    const envelopedForReq = new WeakMap();
    const handler = (0, fetch_1.createHandler)({
        async onSubscribe(req, params) {
            const { serverContext, getEnveloped } = envelopedForReq.get(req.raw) || {};
            if (!getEnveloped) {
                throw new Error('Enveloped not prepared for request');
            }
            const enveloped = getEnveloped({
                ...serverContext,
                request: req.raw,
                params,
            });
            const document = enveloped.parse(params.query);
            enveloped.validate(enveloped.schema, document);
            const contextValue = await enveloped.contextFactory();
            const executionArgs = {
                schema: enveloped.schema,
                document,
                contextValue,
                variableValues: params.variables,
                operationName: params.operationName,
            };
            const operation = (0, graphql_1.getOperationAST)(document, params.operationName);
            const executeFn = operation?.operation === 'subscription'
                ? enveloped.subscribe
                : enveloped.execute;
            return executeFn(executionArgs);
        },
    });
    return {
        async onRequest({ request, getEnveloped, endResponse, serverContext }) {
            const [path, _search] = request.url.split('?');
            if (path.endsWith(endpoint)) {
                envelopedForReq.set(request, { serverContext, getEnveloped });
                endResponse(await handler(request));
            }
        },
    };
}
exports.useGraphQLSSE = useGraphQLSSE;
