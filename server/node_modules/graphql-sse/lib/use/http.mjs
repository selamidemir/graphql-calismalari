var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
import { createHandler as createRawHandler, } from '../handler.mjs';
/**
 * The ready-to-use handler for Node's [http](https://nodejs.org/api/http.html).
 *
 * Errors thrown from the provided options or callbacks (or even due to
 * library misuse or potential bugs) will reject the handler or bubble to the
 * returned iterator. They are considered internal errors and you should take care
 * of them accordingly.
 *
 * For production environments, its recommended not to transmit the exact internal
 * error details to the client, but instead report to an error logging tool or simply
 * the console.
 *
 * ```ts
 * import http from 'http';
 * import { createHandler } from 'graphql-sse/lib/use/http';
 * import { schema } from './my-graphql/index.mjs';
 *
 * const handler = createHandler({ schema });
 *
 * const server = http.createServer(async (req, res) => {
 *   try {
 *     await handler(req, res);
 *   } catch (err) {
 *     console.error(err);
 *     res.writeHead(500).end();
 *   }
 * });
 *
 * server.listen(4000);
 * console.log('Listening to port 4000');
 * ```
 *
 * @category Server/http
 */
export function createHandler(options) {
    const handler = createRawHandler(options);
    return async function handleRequest(req, res) {
        var _a, e_1, _b, _c;
        const [body, init] = await handler({
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- The method will always be available with http requests.
            method: req.method,
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- The url will always be available with http requests.
            url: req.url,
            headers: {
                get(key) {
                    const header = req.headers[key];
                    return Array.isArray(header) ? header.join('\n') : header;
                },
            },
            body: () => new Promise((resolve, reject) => {
                let body = '';
                req.on('data', (chunk) => (body += chunk));
                req.once('error', reject);
                req.once('end', () => {
                    req.off('error', reject);
                    resolve(body);
                });
            }),
            raw: req,
            context: { res },
        });
        res.writeHead(init.status, init.statusText, init.headers);
        if (!body || typeof body === 'string') {
            return new Promise((resolve) => res.end(body, () => resolve()));
        }
        res.once('close', body.return);
        try {
            for (var _d = true, body_1 = __asyncValues(body), body_1_1; body_1_1 = await body_1.next(), _a = body_1_1.done, !_a;) {
                _c = body_1_1.value;
                _d = false;
                try {
                    const value = _c;
                    await new Promise((resolve, reject) => res.write(value, (err) => (err ? reject(err) : resolve())));
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = body_1.return)) await _b.call(body_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        res.off('close', body.return);
        return new Promise((resolve) => res.end(resolve));
    };
}
