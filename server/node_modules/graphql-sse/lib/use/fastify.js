"use strict";
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHandler = void 0;
const handler_1 = require("../handler");
/**
 * The ready-to-use handler for [fastify](https://www.fastify.io).
 *
 * Errors thrown from the provided options or callbacks (or even due to
 * library misuse or potential bugs) will reject the handler or bubble to the
 * returned iterator. They are considered internal errors and you should take care
 * of them accordingly.
 *
 * For production environments, its recommended not to transmit the exact internal
 * error details to the client, but instead report to an error logging tool or simply
 * the console.
 *
 * ```ts
 * import Fastify from 'fastify'; // yarn add fastify
 * import { createHandler } from 'graphql-sse/lib/use/fastify';
 *
 * const handler = createHandler({ schema });
 *
 * const fastify = Fastify();
 *
 * fastify.all('/graphql/stream', async (req, reply) => {
 *   try {
 *     await handler(req, reply);
 *   } catch (err) {
 *     console.error(err);
 *     reply.code(500).send();
 *   }
 * });
 *
 * fastify.listen({ port: 4000 });
 * console.log('Listening to port 4000');
 * ```
 *
 * @category Server/fastify
 */
function createHandler(options) {
    const handler = (0, handler_1.createHandler)(options);
    return async function handleRequest(req, reply) {
        var _a, e_1, _b, _c;
        const [body, init] = await handler({
            method: req.method,
            url: req.url,
            headers: {
                get(key) {
                    const header = req.headers[key];
                    return Array.isArray(header) ? header.join('\n') : header;
                },
            },
            body: () => new Promise((resolve, reject) => {
                if (req.body) {
                    // body was parsed by middleware
                    return req.body;
                }
                let body = '';
                req.raw.on('data', (chunk) => (body += chunk));
                req.raw.once('error', reject);
                req.raw.once('end', () => {
                    req.raw.off('error', reject);
                    resolve(body);
                });
            }),
            raw: req,
            context: { reply },
        });
        reply.raw.writeHead(init.status, init.statusText, init.headers);
        if (!body || typeof body === 'string') {
            return new Promise((resolve) => reply.raw.end(body, () => resolve()));
        }
        reply.raw.once('close', body.return);
        try {
            for (var _d = true, body_1 = __asyncValues(body), body_1_1; body_1_1 = await body_1.next(), _a = body_1_1.done, !_a;) {
                _c = body_1_1.value;
                _d = false;
                try {
                    const value = _c;
                    await new Promise((resolve, reject) => reply.raw.write(value, (err) => (err ? reject(err) : resolve())));
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = body_1.return)) await _b.call(body_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        reply.raw.off('close', body.return);
        return new Promise((resolve) => reply.raw.end(resolve));
    };
}
exports.createHandler = createHandler;
